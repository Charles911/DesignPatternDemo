namespace Facade;

/// <summary>
/// 外观模式
/// </summary>
/// <remarks>
/// 以学生选课系统为例子演示外观模式的使用，学生选课模块包括功能有：
/// 验证选课的人数是否已满
/// 通知用户课程选择成功与否
/// 
/// 定义：
/// 外观模式提供了一个统一的接口，用来访问子系统中的一群接口。
/// 外观定义了一个高层接口，让子系统更容易使用。
/// 使用外观模式时，我们创建了一个统一的类，用来包装子系统中一个或多个复杂的类，客户端可以直接通过外观类来调用内部子系统中方法，从而外观模式让客户和子系统之间避免了紧耦合。
/// 
/// 优点：
/// 1.外观模式对客户屏蔽了子系统组件，从而简化了接口，减少了客户处理的对象数目并使子系统的使用更加简单。
/// 2.外观模式实现了子系统与客户之间的松耦合关系，而子系统内部的功能组件是紧耦合的。松耦合使得子系统的组件变化不会影响到它的客户。
/// 
/// 缺点：
/// 1.如果增加新的子系统可能需要修改外观类或客户端的源代码，这样就违背了”开——闭原则“（不过这点也是不可避免）。
/// 
/// 应用场景：
/// 1.外一个复杂的子系统提供一个简单的接口
/// 2.提供子系统的独立性
/// 3.在层次化结构中，可以使用外观模式定义系统中每一层的入口。其中三层架构就是这样的一个例子
/// </remarks>
internal class Program
{
    private static readonly RegistrationFacade facade = new RegistrationFacade();

    private static void Main(string[] args)
    {
        if (facade.RegisterCourse("设计模式", "Learning Hard"))
        {
            Console.WriteLine("选课成功");
        }
        else
        {
            Console.WriteLine("选课失败");
        }
    }
}
